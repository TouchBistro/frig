{
    "docs": [
        {
            "location": "/", 
            "text": "Frig\n\n\nReact Forms made easy. Developed at \nTouchBistro\n in Toronto.\n\n\nFrig\n is:\n\n\n\n\nSimple\n - Most form fields are 1 liners. Automatic type inference from your data keeps your form code short.\n\n\nData-bindings\n - Connecting any form to any data store is just 2 lines of code. 100% Redux Ready!\n\n\nLayout agnostic\n - Frig leaves the positioning of form elements completely in your control as the designer of the form.\n\n\nPowerful\n - Validations, nested fieldsets, image previews, time pickers and color pickers are all included out of the box!\n\n\n100% React\n - Unlike \ntcomb-forms\n \nFrig\n is built 100% in React so it should feel very familiar in any React project.\n\n\n\n\nInstallation\n\n\n\n\nnpm:\n \nnpm install --save frig frigging-bootstrap\n\n\nbower:\n \nbower install --save frig frigging-bootstrap\n\n\n\n\nNote:\n For non ES6 browser compatibility you will also need to install the \nBabel PolyFill\n.\n\n\nHello Frigging World\n\n\n// One time theme selection\n// (put this in an initialization file and call it once)\nimport Frig from \nfrig\n\nimport FriggingBootstrap from \nfrigging-bootstrap\n\nFrig.defaultTheme(FriggingBootstrap)\n\n// ...\n\n// Libraries needed for each component\nimport React from \nreact\n\nimport ReactDOM from \nreact-dom\n\nimport {Form, Input, Submit} from \nfrig\n\n\nclass TheBasicsExample extends React.Component {\n  displayName = \nTheBasicsExample\n\n  state = {account: {}}\n\n  render() {\n    return (\n      \nForm\n        data={this.state.account}\n        onChange={(account) =\n this.setState({account})}\n      \n\n        \ndiv className=\nrow\n\n          \nInput name=\nemail\n/\n\n          \nInput name=\npassword\n/\n\n          \nInput name=\nrememberMe\n type=\nswitch\n/\n\n          \nSubmit title=\nSign In\n/\n\n        \n/div\n\n      \n/Form\n\n    )\n  }\n}\n\n\n\n\n\n\n\nReact Controlled Components\n\n\nFrig\n is built around React's Controlled Components - a powerful two-way data-binding pattern. For details on how you can make use of this pattern with Frig see: https://facebook.github.io/react/docs/forms.html#controlled-components\n\n\nLicense\n\n\nFrig is licensed under the \nMIT license\n.", 
            "title": "Frig"
        }, 
        {
            "location": "/#frig", 
            "text": "React Forms made easy. Developed at  TouchBistro  in Toronto.  Frig  is:   Simple  - Most form fields are 1 liners. Automatic type inference from your data keeps your form code short.  Data-bindings  - Connecting any form to any data store is just 2 lines of code. 100% Redux Ready!  Layout agnostic  - Frig leaves the positioning of form elements completely in your control as the designer of the form.  Powerful  - Validations, nested fieldsets, image previews, time pickers and color pickers are all included out of the box!  100% React  - Unlike  tcomb-forms   Frig  is built 100% in React so it should feel very familiar in any React project.", 
            "title": "Frig"
        }, 
        {
            "location": "/#installation", 
            "text": "npm:   npm install --save frig frigging-bootstrap  bower:   bower install --save frig frigging-bootstrap   Note:  For non ES6 browser compatibility you will also need to install the  Babel PolyFill .", 
            "title": "Installation"
        }, 
        {
            "location": "/#hello-frigging-world", 
            "text": "// One time theme selection\n// (put this in an initialization file and call it once)\nimport Frig from  frig \nimport FriggingBootstrap from  frigging-bootstrap \nFrig.defaultTheme(FriggingBootstrap)\n\n// ...\n\n// Libraries needed for each component\nimport React from  react \nimport ReactDOM from  react-dom \nimport {Form, Input, Submit} from  frig \n\nclass TheBasicsExample extends React.Component {\n  displayName =  TheBasicsExample \n  state = {account: {}}\n\n  render() {\n    return (\n       Form\n        data={this.state.account}\n        onChange={(account) =  this.setState({account})}\n       \n         div className= row \n           Input name= email / \n           Input name= password / \n           Input name= rememberMe  type= switch / \n           Submit title= Sign In / \n         /div \n       /Form \n    )\n  }\n}", 
            "title": "Hello Frigging World"
        }, 
        {
            "location": "/#react-controlled-components", 
            "text": "Frig  is built around React's Controlled Components - a powerful two-way data-binding pattern. For details on how you can make use of this pattern with Frig see: https://facebook.github.io/react/docs/forms.html#controlled-components", 
            "title": "React Controlled Components"
        }, 
        {
            "location": "/#license", 
            "text": "Frig is licensed under the  MIT license .", 
            "title": "License"
        }, 
        {
            "location": "/core_components/", 
            "text": "import {Form, Input} from \nfrig\n\n\nForm data={this.state.myAccount} onChange={(myAccount) =\n this.setState({myAccount})}\n\n  \nInput name=\nexample\n\n\n/Form\n\n\n\n\n\nProps\n\n\n\n\ndata (required)\n - This is used to populate the values (including default values) of each field in the form. The data property is also used by inputs for type inference where a \ntype\n property is not provided.\n\n\nonChange(data) (required)\n - the onChange callback will be updated whenever there is user input. The onChange function receives the full updated data of the form as it's only argument. Normally this is used to update your store or setState and trigger a re-render passing the new data back in to the form.\n\n\nerrors (optional)\n - an array of strings. The list of errors supplied here can be rendered by the \nErrorList/\n component.\n\n\nonSubmit (optional)\n - a function. Called after the submit button is clicked and all validations have passed. The DOM event is passed to the callback.\n\n\nlayout (optional)\n  - a string. Either \n\"horizontal\"\n for a horizontally layed out form (with labels on the same row as their inputs) or \n\"vertical\"\n for a vertically layed out form (with labels above their inputs). Defaults to \n\"vertical\"\n.\n\n\nalign (optional)\n - a string. Either \n\"left\"\n to align all inputs along the left side of their containing divs or \n\"right\"\n to align all inputs on the right side of their containing divs. Defaults to \n\"left\"\n.\n\n\n\n\nPublic Functions\n\n\nThese functions can be called on the frig form object (eg. using React refs).\n\n\n\n\nvalidate()\n - validates the form's inputs and renders all errors.\n\n\nisValid()\n - returns true if all of the form's inputs are in a valid state. Does not visibly render errors.\n\n\nisModified()\n - returns true if any of the form's inputs have been modified by the user (in other words \nprops.data\n changes do not count).\n\n\nmodifications()\n - returns an \nobject\n of modifications by the user to the form's fields and nested fields. The modifications are keyed by the input and nested fieldset names. The value for each inputs is \ntrue\n and the value for each nested fieldset is a nested \nobject\n.\n\n\nresetModified()\n - resets the value of \nisModified()\n to false.\n\n\nreset()\n - resets the value of \nisModified()\n to false and resets all validations (eg. hiding required feild error messages).\n\n\nformData()\n - returns the HTML5 FormData object. See https://developer.mozilla.org/en/docs/Web/API/FormData\n\n\n\n\n\n\nimport {Form, Input} from \nfrig\n\n\nForm data={this.state.myAccount} onChange={(myAccount) =\n this.setState({myAccount})}\n\n  \nInput name=\nexample\n\n\n/Form\n\n\n\n\n\nFrig Inputs are your interface to any kind of form element that allow the user to edit their data.\n\n\nFor example \nInput name=\"username\"/\n will render a HTML input element by default however \nInput name=\"friends\" type=\"typeahead\" multiple=true options=[\"Jane\", \"Joe\"]/\n will render a typeahead multi-select.\n\n\nAn input receives a name and loads its value from the form's data (ie. \nvalue = form.props.data[input.props.name]\n). To specificy a type of form element to render you can either set its \nprops.type\n or \nprops.component\n or leave both blank and have the input guess its type based on the form data and its name (see \nType Inference\n).\n\n\nProps\n\n\n\n\nname (required)\n - a string. The key of the input's value in the form's \nprops.data\n\n\ntype (optional)\n - a string. The type of input. If a type is not provided it will be guessed based on the input's name and value (based on the form's data). the \nInput/\n is basically a wrapper for specific \"themed inputs\" (just normal react components defined by the Frig theme). See the \nAvailable Input Types\n section for a complete list of type values.\n\n\ncomponent (optional)\n - a React Component. Overrides the themed input specified by the type with a specific React Component to provide the user interface implementation of the input.\n\n\nerrors (optional)\n - an array of strings. These errors are appended to the errors generated by the input's validations.\n\n\noptions (optional)\n - Sets the options for a \nselect\n or \ntypeahead\n type input. An array of one of the following:\n\n\n{value: OBJECT, label: STRING}\n\n\n[LABEL_STRING, VALUE_OBJECT]\n\n\nSTRING\n\n\n\n\n\n\nclassName (optional)\n - string. Custom class names for the input.\n\n\ndisabled (optional)\n - boolean (default: false). If set to true will disable user input.\n\n\nmultiple (optional)\n - boolean (default: false). If set to true will enable mutiple-selection (eg. for a select form election).\n\n\nvalidate (optional)\n - boolean (default: true). If set to false will prevent validations from running on this input.\n\n\n\n\nIn addition some input types can have additional props specified. Please read the frigging_bootstrap source code for details.\n\n\nAvailable Input Types and their Themed Input Components\n\n\nEach type identifies a React Component in the theme (eg. FriggingBootstrap) to use inside of the input as the user interface to that particular input. We call these component Themed Input Components to distinguish them from the Frig Input Component.\n\n\n\n\n\n\n\n\nType\n\n\nComponent\n\n\n\n\n\n\n\n\n\n\n\"string\"\n\n\ninput[type=text]\n\n\n\n\n\n\n\"password\"\n\n\ninput[type=password]\n\n\n\n\n\n\n\"email\"\n\n\ninput[type=email]\n\n\n\n\n\n\n\"url\"\n\n\ninput[type=url]\n\n\n\n\n\n\n\"tel\"\n\n\ninput[type=tel]\n\n\n\n\n\n\n\"boolean\"\n\n\ninput[type=checkbox]\n\n\n\n\n\n\n\"text\"\n\n\ntext\n\n\n\n\n\n\n\"file\"\n\n\nfile[type=file]\n\n\n\n\n\n\n\"float\"\n\n\ninput[type=number]\n\n\n\n\n\n\n\"switch\"\n\n\nswitch\n\n\n\n\n\n\n\"time\"\n\n\ntimepicker\n\n\n\n\n\n\n\"select\"\n\n\nselect\n\n\n\n\n\n\n\"typeahead\"\n\n\ntypeahead\n\n\n\n\n\n\n\n\nType Inference\n\n\nIf a \ntype\n isn't specified then the input's type will be guessed based on the form data and its name according to the following rules:\n\n\n\n\nIf \nmultiple\n or \noptions\n is specified then the type will default to a \nselect\n\n\nIf \nform.props[input.props.name]\n is an array then the type will default to a \nselect\n\n\nIf the \nname\n ends in \n\"password\"\n then the type will default to a \npassword\n\n\nOtherwise the type is based on the \ntypeof\n of the \nform.props[input.props.name]\n\n\n\n\n\n\nimport {Form, Submit} from \nfrig\n\n\nForm data={this.state.myAccount} onChange={(myAccount) =\n this.setState({myAccount})}\n\n  \nSubmit title=\nLogin\n/\n\n\n/Form\n\n\n\n\n\nProps\n\n\n\n\ntitle (optional)\n - a string. The text of the submit button.\n\n\n\n\n\n\nimport {Form, ErrorList} from \nfrig\n\n\nForm data={this.state.myAccount} onChange={(myAccount) =\n this.setState({myAccount})}\n\n  \nErrorList/\n\n\n/Form\n\n\n\n\n\nThe errorList component renders all the form-level errors in the form's \nprops.errors\n.\n\n\n\n\nimport {Form, Fieldset, Input} from \nfrig\n\n\nForm data={this.state.myAccount} onChange={(myAccount) =\n this.setState({myAccount})}\n\n  \nFieldset name=\nchildren\n\n    \nInput name=\nfirstName\n/\n\n    \nInput name=\nlastName\n/\n\n    \nInput name=\nage\n/\n\n  \n/Fieldset\n\n\n/Form\n\n\n\n\n\nA Fieldset takes a name (some key in the form's data) and produces one or more recursive (ie. nested) forms. Fieldsets accomidate both \"has one\" (nested objects) and \"has many\" (nested arrays of objects) relationships in form data.\n\n\nCalling validate/isValid/isModified on a parent form object will call it on all of it's nested fields and incorporate their values recursively.\n\n\nProps\n\n\n\n\nname (required)\n - The key of the fieldset's data object (or array of data objects) in the \nForm/\n's \nprops.data\n\n\n\n\n\n\nimport {Form, Fieldset, FieldsetText, Input} from \nfrig\n\n\nForm data={this.state.myAccount} onChange={(myAccount) =\n this.setState({myAccount})}\n\n  \nFieldset name=\nchildren\n\n    \nh2\n\n      \nFieldsetText text={(index) =\n `Child Number ${index}`}/\n\n    \n/h2\n\n    \nInput name=\nfirstName\n/\n\n    \nInput name=\nlastName\n/\n\n    \nInput name=\nage\n/\n\n  \n/Fieldset\n\n\n/Form\n\n\n\n\n\nFieldsetText gives access to the index number of a fieldset for creating text that is dynamic across each child in a has many type fieldset - ie. fieldsets that are iterated over arrays of data.\n\n\nProps\n\n\n\n\ntext (required)\n - A function. First argument is the index number. Return a string to be injected into the DOM.", 
            "title": "Core Components"
        }, 
        {
            "location": "/core_components/#props", 
            "text": "data (required)  - This is used to populate the values (including default values) of each field in the form. The data property is also used by inputs for type inference where a  type  property is not provided.  onChange(data) (required)  - the onChange callback will be updated whenever there is user input. The onChange function receives the full updated data of the form as it's only argument. Normally this is used to update your store or setState and trigger a re-render passing the new data back in to the form.  errors (optional)  - an array of strings. The list of errors supplied here can be rendered by the  ErrorList/  component.  onSubmit (optional)  - a function. Called after the submit button is clicked and all validations have passed. The DOM event is passed to the callback.  layout (optional)   - a string. Either  \"horizontal\"  for a horizontally layed out form (with labels on the same row as their inputs) or  \"vertical\"  for a vertically layed out form (with labels above their inputs). Defaults to  \"vertical\" .  align (optional)  - a string. Either  \"left\"  to align all inputs along the left side of their containing divs or  \"right\"  to align all inputs on the right side of their containing divs. Defaults to  \"left\" .", 
            "title": "Props"
        }, 
        {
            "location": "/core_components/#public-functions", 
            "text": "These functions can be called on the frig form object (eg. using React refs).   validate()  - validates the form's inputs and renders all errors.  isValid()  - returns true if all of the form's inputs are in a valid state. Does not visibly render errors.  isModified()  - returns true if any of the form's inputs have been modified by the user (in other words  props.data  changes do not count).  modifications()  - returns an  object  of modifications by the user to the form's fields and nested fields. The modifications are keyed by the input and nested fieldset names. The value for each inputs is  true  and the value for each nested fieldset is a nested  object .  resetModified()  - resets the value of  isModified()  to false.  reset()  - resets the value of  isModified()  to false and resets all validations (eg. hiding required feild error messages).  formData()  - returns the HTML5 FormData object. See https://developer.mozilla.org/en/docs/Web/API/FormData", 
            "title": "Public Functions"
        }, 
        {
            "location": "/core_components/#props_1", 
            "text": "name (required)  - a string. The key of the input's value in the form's  props.data  type (optional)  - a string. The type of input. If a type is not provided it will be guessed based on the input's name and value (based on the form's data). the  Input/  is basically a wrapper for specific \"themed inputs\" (just normal react components defined by the Frig theme). See the  Available Input Types  section for a complete list of type values.  component (optional)  - a React Component. Overrides the themed input specified by the type with a specific React Component to provide the user interface implementation of the input.  errors (optional)  - an array of strings. These errors are appended to the errors generated by the input's validations.  options (optional)  - Sets the options for a  select  or  typeahead  type input. An array of one of the following:  {value: OBJECT, label: STRING}  [LABEL_STRING, VALUE_OBJECT]  STRING    className (optional)  - string. Custom class names for the input.  disabled (optional)  - boolean (default: false). If set to true will disable user input.  multiple (optional)  - boolean (default: false). If set to true will enable mutiple-selection (eg. for a select form election).  validate (optional)  - boolean (default: true). If set to false will prevent validations from running on this input.   In addition some input types can have additional props specified. Please read the frigging_bootstrap source code for details.", 
            "title": "Props"
        }, 
        {
            "location": "/core_components/#available-input-types-and-their-themed-input-components", 
            "text": "Each type identifies a React Component in the theme (eg. FriggingBootstrap) to use inside of the input as the user interface to that particular input. We call these component Themed Input Components to distinguish them from the Frig Input Component.     Type  Component      \"string\"  input[type=text]    \"password\"  input[type=password]    \"email\"  input[type=email]    \"url\"  input[type=url]    \"tel\"  input[type=tel]    \"boolean\"  input[type=checkbox]    \"text\"  text    \"file\"  file[type=file]    \"float\"  input[type=number]    \"switch\"  switch    \"time\"  timepicker    \"select\"  select    \"typeahead\"  typeahead", 
            "title": "Available Input Types and their Themed Input Components"
        }, 
        {
            "location": "/core_components/#type-inference", 
            "text": "If a  type  isn't specified then the input's type will be guessed based on the form data and its name according to the following rules:   If  multiple  or  options  is specified then the type will default to a  select  If  form.props[input.props.name]  is an array then the type will default to a  select  If the  name  ends in  \"password\"  then the type will default to a  password  Otherwise the type is based on the  typeof  of the  form.props[input.props.name]", 
            "title": "Type Inference"
        }, 
        {
            "location": "/core_components/#props_2", 
            "text": "title (optional)  - a string. The text of the submit button.", 
            "title": "Props"
        }, 
        {
            "location": "/core_components/#props_3", 
            "text": "name (required)  - The key of the fieldset's data object (or array of data objects) in the  Form/ 's  props.data", 
            "title": "Props"
        }, 
        {
            "location": "/core_components/#props_4", 
            "text": "text (required)  - A function. First argument is the index number. Return a string to be injected into the DOM.", 
            "title": "Props"
        }, 
        {
            "location": "/input_types/", 
            "text": "Checkbox\n\n\nInput name=\nexample\n component=\ncheckbox\n/\n\n\n\n\n\nColor\n\n\nInput name=\nexample\n component=\ncolor\n/\n\n\n\n\n\nFile\n\n\nInput name=\nexample\n component=\nfile\n/\n\n\n\n\n\nInput\n\n\nInput name=\nexample\n component=\ninput\n/\n\n\n\n\n\nNumber\n\n\nInput name=\nexample\n component=\nnumber\n\n  {/* Optional: Uses [numeral.js][http://numeraljs.com] format. Defaults to: \n0,0[.][00]\n */}\n  format={\n0,0.00\n}\n  {/* Optional: The minimum number allowed */}\n  min={3}\n  {/* Optional: The maxinum number allowed */}\n  max={5}\n/\n\n\n\n\n\nSelect\n\n\nInput name=\nexample\n component=\nselect\n\n  options={[[\nCA\n, \nCanada\n], [\nnotCA\n, \nNot Canada\n]]}\n/\n\n\n\n\n\nNote:\n Select components require a set of options. See Core Components for details.\n\n\nSwitch\n\n\nInput name=\nexample\n component=\nswitch\n\n  onColor=\nprimary\n {/* primary, success, info, warning, danger or default */}\n  onText=\nON\n\n  offColor=\ndefault\n {/* primary, success, info, warning, danger or default */}\n  offText=\nOFF\n\n  bsSize=undefined {/* mini, small, undefined (normal sized) or large */}\n  disabled=false\n  {/* Sets the width of the switch handles, useful for displaying longer onTexts\n    * and offTexts */}\n  handleWidth=undefined\n/\n\n\n\n\n\nText\n\n\nInput name=\nexample\n component=\ntext\n/\n\n\n\n\n\nTimepicker\n\n\nInput name=\nexample\n component=\ntimepicker\n/", 
            "title": "Input Types"
        }, 
        {
            "location": "/input_types/#checkbox", 
            "text": "Input name= example  component= checkbox /", 
            "title": "Checkbox"
        }, 
        {
            "location": "/input_types/#color", 
            "text": "Input name= example  component= color /", 
            "title": "Color"
        }, 
        {
            "location": "/input_types/#file", 
            "text": "Input name= example  component= file /", 
            "title": "File"
        }, 
        {
            "location": "/input_types/#input", 
            "text": "Input name= example  component= input /", 
            "title": "Input"
        }, 
        {
            "location": "/input_types/#number", 
            "text": "Input name= example  component= number \n  {/* Optional: Uses [numeral.js][http://numeraljs.com] format. Defaults to:  0,0[.][00]  */}\n  format={ 0,0.00 }\n  {/* Optional: The minimum number allowed */}\n  min={3}\n  {/* Optional: The maxinum number allowed */}\n  max={5}\n/", 
            "title": "Number"
        }, 
        {
            "location": "/input_types/#select", 
            "text": "Input name= example  component= select \n  options={[[ CA ,  Canada ], [ notCA ,  Not Canada ]]}\n/   Note:  Select components require a set of options. See Core Components for details.", 
            "title": "Select"
        }, 
        {
            "location": "/input_types/#switch", 
            "text": "Input name= example  component= switch \n  onColor= primary  {/* primary, success, info, warning, danger or default */}\n  onText= ON \n  offColor= default  {/* primary, success, info, warning, danger or default */}\n  offText= OFF \n  bsSize=undefined {/* mini, small, undefined (normal sized) or large */}\n  disabled=false\n  {/* Sets the width of the switch handles, useful for displaying longer onTexts\n    * and offTexts */}\n  handleWidth=undefined\n/", 
            "title": "Switch"
        }, 
        {
            "location": "/input_types/#text", 
            "text": "Input name= example  component= text /", 
            "title": "Text"
        }, 
        {
            "location": "/input_types/#timepicker", 
            "text": "Input name= example  component= timepicker /", 
            "title": "Timepicker"
        }, 
        {
            "location": "/bootstrap/", 
            "text": "In addition to the properties listed under each component on the Input Types page every bootstrap input component can receive the following bootstrap-specific settings (the values here are the defaults):\n\n\nInput name=\nexample\n\n  {/* Bootstrap Grid Sizes */}\n  xs={12}\n  sm={undefined}\n  md={undefined}\n  lg={undefined}\n  {/* Bootstrap Grid Offsets */}\n  xsOffset={undefined}\n  smOffset={undefined}\n  mdOffset={undefined}\n  lgOffset={undefined}\n  {/* Block changes inputs with layout: \nhorizontal\n to use the full width of\n    * their container and disables the label. */}\n  block={false}\n  {/* Label width for horizontal labels */}\n  labelWidth={{xs: 12, sm: 2}}\n/", 
            "title": "Bootstrap"
        }
    ]
}