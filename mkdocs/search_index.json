{
    "docs": [
        {
            "location": "/", 
            "text": "Frig\n\n\nReact Forms made easy. Developed at \nTouchBistro\n in Toronto.\n\n\nFrig\n aims to help you build exactly the forms you want by providing you with a small toolkit of powerful React components.\n\n\nThe basic goal of \nFrig\n is to not touch the layout - leaving the specific positioning of the form elements as a choice for you to completely control as the designer.\n\n\nEvery input and form element in \nFrig\n is a React Component so you can mix them with your other React Components seemlessly. \nFrig\n should feel very familiar in any React project.\n\n\nA basic example\n\n\nvar SignIn = React.createClass({\n\n  mixins: [LinkedStateMixin],\n\n  getInitialState: function() {\n    return {}\n  },\n\n  form: function(f) {\n    return \ndiv className=\nrow\n\n      \nf.input name=\nemail\n/\n\n      \nf.input name=\npassword\n/\n\n      \nf.input name=\nrememberMe\n type=\nswitch\n/\n\n      \nf.submit title=\nSign In\n/\n\n    \n/div\n\n  },\n\n  render: function() {\n    return \nFrig\n      data={this.linkState(\naccount\n)}\n      form={this.form}\n    /\n\n  }\n})\n\n\n\n\nGenerates this sweet Bootstrap form\n\n\n\n\n\nTwo-Way Data Binding\n\n\nFrig\n is built around \nReactLink's\n powerful two-way databinding making accessing your form data as simple as \nthis.state\n and updating a form element's value as easy as \nthis.setState\n.\n\n\nIf we modify the render function in the previous example\n\n\n  // ...\n  render: function() {\n    return \ndiv\n\n      \nFrig\n        data={this.linkState(\naccount\n)}\n        form={this.form}\n      /\n\n      \nh3\nState:\n/h3\n\n      \npre\n{JSON.stringify(this.state.account)}\n/pre\n\n    \n/div\n\n  }\n  // ...\n\n\n\n\nWe can see the state is automatically updated by user input\n\n\n\n\n\nLicense\n\n\nFrig is licensed under the \nMIT license\n.", 
            "title": "Frig"
        }, 
        {
            "location": "/#frig", 
            "text": "React Forms made easy. Developed at  TouchBistro  in Toronto.  Frig  aims to help you build exactly the forms you want by providing you with a small toolkit of powerful React components.  The basic goal of  Frig  is to not touch the layout - leaving the specific positioning of the form elements as a choice for you to completely control as the designer.  Every input and form element in  Frig  is a React Component so you can mix them with your other React Components seemlessly.  Frig  should feel very familiar in any React project.  A basic example  var SignIn = React.createClass({\n\n  mixins: [LinkedStateMixin],\n\n  getInitialState: function() {\n    return {}\n  },\n\n  form: function(f) {\n    return  div className= row \n       f.input name= email / \n       f.input name= password / \n       f.input name= rememberMe  type= switch / \n       f.submit title= Sign In / \n     /div \n  },\n\n  render: function() {\n    return  Frig\n      data={this.linkState( account )}\n      form={this.form}\n    / \n  }\n})  Generates this sweet Bootstrap form", 
            "title": "Frig"
        }, 
        {
            "location": "/#two-way-data-binding", 
            "text": "Frig  is built around  ReactLink's  powerful two-way databinding making accessing your form data as simple as  this.state  and updating a form element's value as easy as  this.setState .  If we modify the render function in the previous example    // ...\n  render: function() {\n    return  div \n       Frig\n        data={this.linkState( account )}\n        form={this.form}\n      / \n       h3 State: /h3 \n       pre {JSON.stringify(this.state.account)} /pre \n     /div \n  }\n  // ...  We can see the state is automatically updated by user input", 
            "title": "Two-Way Data Binding"
        }, 
        {
            "location": "/#license", 
            "text": "Frig is licensed under the  MIT license .", 
            "title": "License"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Installation\n\n\nYou have many options here. Choose one:\n\n\n\n\nInstall with \nnpm install --save frig frigging-bootstrap\n\n\nInstall with \nbower install --save frig frigging-bootstrap\n\n\nDownload \nfrig.js\n, \nfrigging-bootstrap.js\n and \nfrigging-bootstrap.css\n\n\n\n\nNote:\n For non ES6 browser compatibility you will also need to install the \nBabel PolyFill\n.\n\n\nSetting the theme\n\n\nFrig requires a theme to be set. The only theme currently available is \nFriggingBootstrap\n so you'll need to add this line to the top of your javascript:\n\n\nFrig.defaultTheme(FriggingBootstrap)\n\n\n\n\nCoffeescript DSL or JSX\n\n\nFrig comes in two flavours, a coffeescript DSL and JSX components.\n\n\nBoth are equally capable. If your new to React we recommend using the JSX components.\n\n\nThese two examples are equivalent:\n\n\nDSL\n\n\nReact.createClass\n  render: -\n\n    Frig.dsl formProps, (f) -\n\n      f.input \nusername\n, inputProps\n\n\n\n\nJSX\n\n\nReact.createClass({\n  form: function (f) {\n    \nf.input name=\nusername\n {...inputProps}/\n\n  }\n  render: function() {\n    \nFrig.Form form={this.form} {...formProps}/\n\n  }\n})", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting_started/#installation", 
            "text": "You have many options here. Choose one:   Install with  npm install --save frig frigging-bootstrap  Install with  bower install --save frig frigging-bootstrap  Download  frig.js ,  frigging-bootstrap.js  and  frigging-bootstrap.css   Note:  For non ES6 browser compatibility you will also need to install the  Babel PolyFill .", 
            "title": "Installation"
        }, 
        {
            "location": "/getting_started/#setting-the-theme", 
            "text": "Frig requires a theme to be set. The only theme currently available is  FriggingBootstrap  so you'll need to add this line to the top of your javascript:  Frig.defaultTheme(FriggingBootstrap)", 
            "title": "Setting the theme"
        }, 
        {
            "location": "/getting_started/#coffeescript-dsl-or-jsx", 
            "text": "Frig comes in two flavours, a coffeescript DSL and JSX components.  Both are equally capable. If your new to React we recommend using the JSX components.  These two examples are equivalent:  DSL  React.createClass\n  render: - \n    Frig.dsl formProps, (f) - \n      f.input  username , inputProps  JSX  React.createClass({\n  form: function (f) {\n     f.input name= username  {...inputProps}/ \n  }\n  render: function() {\n     Frig.Form form={this.form} {...formProps}/ \n  }\n})", 
            "title": "Coffeescript DSL or JSX"
        }, 
        {
            "location": "/core_components/", 
            "text": "Form\n\n\nAvailable as \nFrig.Form\n in JSX and \nFrig.dsl\n in the Coffeescript DSL\n\n\nFrig.Form data={this.linkState(\nmyAccount\n)} form={this.myAccountForm}/\n\n\n\n\n\nProps\n\n\n\n\ndata (required)\n - either a ReactLink or an object. This is used to populate the values of each field in the form. The data property is also used by inputs for type inference where a \ntype\n property is not provided. If a ReactLink is provided the ReactLink will be updated with the user's inputs. In the Coffeescript DSL version the form is the last argument.\n\n\nform (required)\n - a function. The form callback is expected to generate the content of the form as either a single React component or array of components. The form callback receives an object \nf\n containing the Frig components needed to build a form (In the Coffeescript DSL these components are replaced with equivalent functions).\n\n\nerrors (optional)\n - an array of strings. The list of errors supplied here can be rendered by the \nf.errors\n component.\n\n\nonSubmit (optional)\n - a function. Called after the submit button is clicked and all validations have passed. The DOM event is passed to the callback.\n\n\nlayout (optional)\n  - a string. Either \n\"horizontal\"\n for a horizontally layed out form (with labels on the same row as their inputs) or \n\"vertical\"\n for a vertically layed out form (with labels above their inputs). Defaults to \n\"vertical\"\n.\n\n\nalign (optional)\n - a string. Either \n\"left\"\n to align all inputs along the left side of their containing divs or \n\"right\"\n to align all inputs on the right side of their containing divs. Defaults to \n\"left\"\n.\n\n\n\n\nPublic Functions\n\n\nThese functions can be called on the frig form object (eg. using React refs).\n\n\n\n\nvalidate()\n - validates the form's inputs and renders all errors.\n\n\nisValid()\n - returns true if all of the form's inputs are in a valid state. Does not visibly render errors.\n\n\nisModified()\n - returns true if any of the form's inputs have been modified by the user (in other words \nprops.data\n changes do not count).\n\n\nmodifications()\n - returns an \nobject\n of modifications by the user to the form's fields and nested fields. The modifications are keyed by the input and nested fieldset names. The value for each inputs is \ntrue\n and the value for each nested fieldset is a nested \nobject\n.\n\n\nresetModified()\n - resets the value of \nisModified()\n to false.\n\n\nreset()\n - resets the value of \nisModified()\n to false and resets all validations (eg. hiding required feild error messages).\n\n\n\n\nf.input\n\n\nf.input name=\nexample\n/\n\n\n\n\n\nFrig Inputs are your interface to any kind of form element that allow the user to edit their data.\n\n\nFor example \nf.input name=\"username\"/\n will render a HTML input element by default however \nf.input name=\"friends\" type=\"typeahead\" multiple=true options=[\"Jane\", \"Joe\"]/\n will render a typeahead multi-select.\n\n\nAn input receives a name and loads its value from the form's data (ie. \nvalue = form.props.data[input.props.name]\n). To specificy a type of form element to render you can either set its \nprops.type\n or \nprops.component\n or leave both blank and have the input guess its type based on the form data and its name (see \nType Inference\n).\n\n\nProps\n\n\n\n\nname (required)\n - a string. The key of the input's value in the form's \nprops.data\n\n\ntype (optional)\n - a string. The type of input. If a type is not provided it will be guessed based on the input's name and value (based on the form's data). the \nf.input\n is basically a wrapper for specific \"themed inputs\" (just normal react components defined by the Frig theme). See the \nAvailable Input Types\n section for a complete list of type values.\n\n\ncomponent (optional)\n - a React Component. Overrides the themed input specified by the type with a specific React Component to provide the user interface implementation of the input.\n\n\nerrors (optional)\n - an array of strings. These errors are appended to the errors generated by the input's validations.\n\n\noptions (optional)\n - Sets the options for a \nselect\n or \ntypeahead\n type input. An array of one of the following:\n\n\n{value: OBJECT, label: STRING}\n\n\n[LABEL_STRING, VALUE_OBJECT]\n\n\nSTRING\n\n\n\n\n\n\nclassName (optional)\n - string. Custom class names for the input.\n\n\ndisabled (optional)\n - boolean (default: false). If set to true will disable user input.\n\n\nmultiple (optional)\n - boolean (default: false). If set to true will enable mutiple-selection (eg. for a select form election).\n\n\nvalidate (optional)\n - boolean (default: true). If set to false will prevent validations from running on this input.\n\n\n\n\nIn addition some input types can have additional props specified. Please read the frigging_bootstrap source code for details.\n\n\nAvailable Input Types and their Themed Input Components\n\n\nEach type identifies a React Component in the theme (eg. FriggingBootstrap) to use inside of the input as the user interface to that particular input. We call these component Themed Input Components to distinguish them from the Frig Input Component.\n\n\n\n\n\n\n\n\nType\n\n\nComponent\n\n\n\n\n\n\n\n\n\n\n\"string\"\n\n\ninput[type=text]\n\n\n\n\n\n\n\"password\"\n\n\ninput[type=password]\n\n\n\n\n\n\n\"email\"\n\n\ninput[type=email]\n\n\n\n\n\n\n\"url\"\n\n\ninput[type=url]\n\n\n\n\n\n\n\"tel\"\n\n\ninput[type=tel]\n\n\n\n\n\n\n\"boolean\"\n\n\ninput[type=checkbox]\n\n\n\n\n\n\n\"text\"\n\n\ntext\n\n\n\n\n\n\n\"file\"\n\n\nfile[type=file]\n\n\n\n\n\n\n\"float\"\n\n\ninput[type=number]\n\n\n\n\n\n\n\"switch\"\n\n\nswitch\n\n\n\n\n\n\n\"time\"\n\n\ntimepicker\n\n\n\n\n\n\n\"select\"\n\n\nselect\n\n\n\n\n\n\n\"typeahead\"\n\n\ntypeahead\n\n\n\n\n\n\n\n\nType Inference\n\n\nIf a \ntype\n isn't specified then the input's type will be guessed based on the form data and its name according to the following rules:\n\n\n\n\nIf \nmultiple\n or \noptions\n is specified then the type will default to a \nselect\n\n\nIf \nform.props[input.props.name]\n is an array then the type will default to a \nselect\n\n\nIf the \nname\n ends in \n\"password\"\n then the type will default to a \npassword\n\n\nOtherwise the type is based on the \ntypeof\n of the \nform.props[input.props.name]\n\n\n\n\nf.nestedFields\n\n\nA Nested field takes a name (some key in the form's data) and produces one or more recursive (ie. nested) forms. Nested fields accomidate both \"has one\" (nested objects) and \"has many\" (nested arrays of objects) relationships in form data.\n\n\nCalling validate/isValid/isModified on a parent form object will call it on all of it's nested fields and incorporate their values recursively.\n\n\nProps\n\n\n\n\nname (required)\n - The key of the nested fields' data object (or array of data objects) in the form's \nprops.data\n\n\nform (required)\n - a function. The form callback is expected to generate the content of the nested fields as either a single React component or array of components. The form callback receives an object \nf\n containing the Frig components needed to build a form (In the Coffeescript DSL these components are replaced with equivalent functions). A second integer \nindex\n argument is added to nested field form callbacks since nested fields can be used on arrays of data.\n\n\n\n\nCoffeescript DSL\n\n\n\n\nIn the Coffeescript DSL version of \nf.nestedFields\n the function accepts two arguments. The first argument is the name and second is the form callback.\n\n\n\n\nExamples\n\n\n\n\nJSX: \nf.nestedFields name=\"address\" form=this.addressForm/\n\n\nCoffeescript \nf.nestedFields \"address\", this.addressForm\n\n\n\n\nf.submit\n\n\nProps\n\n\n\n\ntitle (optional)\n - a string. The text of the submit button. This is the first argument of the coffeescript DSL version.\n\n\n\n\nExamples\n\n\n\n\nJSX: \nf.submit title=\"Log In\"/\n\n\nCoffeescript \nf.submit(\"Log In\")\n\n\n\n\nf.errors\n\n\nThe errors component renders all the form-level errors in the form's \nprops.errors\n.\n\n\nExamples\n\n\n\n\nJSX: \nf.errors/\n\n\nCoffeescript \nf.errors()", 
            "title": "Core Components"
        }, 
        {
            "location": "/core_components/#form", 
            "text": "Available as  Frig.Form  in JSX and  Frig.dsl  in the Coffeescript DSL  Frig.Form data={this.linkState( myAccount )} form={this.myAccountForm}/   Props   data (required)  - either a ReactLink or an object. This is used to populate the values of each field in the form. The data property is also used by inputs for type inference where a  type  property is not provided. If a ReactLink is provided the ReactLink will be updated with the user's inputs. In the Coffeescript DSL version the form is the last argument.  form (required)  - a function. The form callback is expected to generate the content of the form as either a single React component or array of components. The form callback receives an object  f  containing the Frig components needed to build a form (In the Coffeescript DSL these components are replaced with equivalent functions).  errors (optional)  - an array of strings. The list of errors supplied here can be rendered by the  f.errors  component.  onSubmit (optional)  - a function. Called after the submit button is clicked and all validations have passed. The DOM event is passed to the callback.  layout (optional)   - a string. Either  \"horizontal\"  for a horizontally layed out form (with labels on the same row as their inputs) or  \"vertical\"  for a vertically layed out form (with labels above their inputs). Defaults to  \"vertical\" .  align (optional)  - a string. Either  \"left\"  to align all inputs along the left side of their containing divs or  \"right\"  to align all inputs on the right side of their containing divs. Defaults to  \"left\" .   Public Functions  These functions can be called on the frig form object (eg. using React refs).   validate()  - validates the form's inputs and renders all errors.  isValid()  - returns true if all of the form's inputs are in a valid state. Does not visibly render errors.  isModified()  - returns true if any of the form's inputs have been modified by the user (in other words  props.data  changes do not count).  modifications()  - returns an  object  of modifications by the user to the form's fields and nested fields. The modifications are keyed by the input and nested fieldset names. The value for each inputs is  true  and the value for each nested fieldset is a nested  object .  resetModified()  - resets the value of  isModified()  to false.  reset()  - resets the value of  isModified()  to false and resets all validations (eg. hiding required feild error messages).", 
            "title": "Form"
        }, 
        {
            "location": "/core_components/#finput", 
            "text": "f.input name= example /   Frig Inputs are your interface to any kind of form element that allow the user to edit their data.  For example  f.input name=\"username\"/  will render a HTML input element by default however  f.input name=\"friends\" type=\"typeahead\" multiple=true options=[\"Jane\", \"Joe\"]/  will render a typeahead multi-select.  An input receives a name and loads its value from the form's data (ie.  value = form.props.data[input.props.name] ). To specificy a type of form element to render you can either set its  props.type  or  props.component  or leave both blank and have the input guess its type based on the form data and its name (see  Type Inference ).  Props   name (required)  - a string. The key of the input's value in the form's  props.data  type (optional)  - a string. The type of input. If a type is not provided it will be guessed based on the input's name and value (based on the form's data). the  f.input  is basically a wrapper for specific \"themed inputs\" (just normal react components defined by the Frig theme). See the  Available Input Types  section for a complete list of type values.  component (optional)  - a React Component. Overrides the themed input specified by the type with a specific React Component to provide the user interface implementation of the input.  errors (optional)  - an array of strings. These errors are appended to the errors generated by the input's validations.  options (optional)  - Sets the options for a  select  or  typeahead  type input. An array of one of the following:  {value: OBJECT, label: STRING}  [LABEL_STRING, VALUE_OBJECT]  STRING    className (optional)  - string. Custom class names for the input.  disabled (optional)  - boolean (default: false). If set to true will disable user input.  multiple (optional)  - boolean (default: false). If set to true will enable mutiple-selection (eg. for a select form election).  validate (optional)  - boolean (default: true). If set to false will prevent validations from running on this input.   In addition some input types can have additional props specified. Please read the frigging_bootstrap source code for details.  Available Input Types and their Themed Input Components  Each type identifies a React Component in the theme (eg. FriggingBootstrap) to use inside of the input as the user interface to that particular input. We call these component Themed Input Components to distinguish them from the Frig Input Component.     Type  Component      \"string\"  input[type=text]    \"password\"  input[type=password]    \"email\"  input[type=email]    \"url\"  input[type=url]    \"tel\"  input[type=tel]    \"boolean\"  input[type=checkbox]    \"text\"  text    \"file\"  file[type=file]    \"float\"  input[type=number]    \"switch\"  switch    \"time\"  timepicker    \"select\"  select    \"typeahead\"  typeahead     Type Inference  If a  type  isn't specified then the input's type will be guessed based on the form data and its name according to the following rules:   If  multiple  or  options  is specified then the type will default to a  select  If  form.props[input.props.name]  is an array then the type will default to a  select  If the  name  ends in  \"password\"  then the type will default to a  password  Otherwise the type is based on the  typeof  of the  form.props[input.props.name]", 
            "title": "f.input"
        }, 
        {
            "location": "/core_components/#fnestedfields", 
            "text": "A Nested field takes a name (some key in the form's data) and produces one or more recursive (ie. nested) forms. Nested fields accomidate both \"has one\" (nested objects) and \"has many\" (nested arrays of objects) relationships in form data.  Calling validate/isValid/isModified on a parent form object will call it on all of it's nested fields and incorporate their values recursively.  Props   name (required)  - The key of the nested fields' data object (or array of data objects) in the form's  props.data  form (required)  - a function. The form callback is expected to generate the content of the nested fields as either a single React component or array of components. The form callback receives an object  f  containing the Frig components needed to build a form (In the Coffeescript DSL these components are replaced with equivalent functions). A second integer  index  argument is added to nested field form callbacks since nested fields can be used on arrays of data.   Coffeescript DSL   In the Coffeescript DSL version of  f.nestedFields  the function accepts two arguments. The first argument is the name and second is the form callback.   Examples   JSX:  f.nestedFields name=\"address\" form=this.addressForm/  Coffeescript  f.nestedFields \"address\", this.addressForm", 
            "title": "f.nestedFields"
        }, 
        {
            "location": "/core_components/#fsubmit", 
            "text": "Props   title (optional)  - a string. The text of the submit button. This is the first argument of the coffeescript DSL version.   Examples   JSX:  f.submit title=\"Log In\"/  Coffeescript  f.submit(\"Log In\")", 
            "title": "f.submit"
        }, 
        {
            "location": "/core_components/#ferrors", 
            "text": "The errors component renders all the form-level errors in the form's  props.errors .  Examples   JSX:  f.errors/  Coffeescript  f.errors()", 
            "title": "f.errors"
        }, 
        {
            "location": "/bootstrap_components/", 
            "text": "Each type of FriggingBootstrap input component has properties that are specific to that type of input.\n\n\nIn addition to the properties listed under each component on this page and on the previous page every bootstrap input component can receive the following bootstrap-specific settings (the values here are the defaults):\n\n\nf.input name=\nexample\n\n  {/* Bootstrap Grid Sizes */}\n  xs=12\n  sm=undefined\n  md=undefined\n  lg=undefined\n  {/* Bootstrap Grid Offsets */}\n  xsOffset=undefined\n  smOffset=undefined\n  mdOffset=undefined\n  lgOffset=undefined\n  {/* Block changes inputs with layout: \nhorizontal\n to use the full width of\n    * their container and disables the label. */}\n  block=false\n  {/* Label width for horizontal labels */}\n  labelWidth={{xs: 12, sm: 2}}\n/\n\n\n\n\n\nCheckbox\n\n\nf.input name=\nexample\n component=\ncheckbox\n/\n\n\n\n\n\nColor\n\n\nf.input name=\nexample\n component=\ncolor\n/\n\n\n\n\n\nFile\n\n\nf.input name=\nexample\n component=\nfile\n/\n\n\n\n\n\nInput\n\n\nf.input name=\nexample\n component=\ninput\n/\n\n\n\n\n\nNumber\n\n\nf.input name=\nexample\n component=\nnumber\n\n  {/* Uses [numeral.js][http://numeraljs.com] format. Defaults to: \n0,0[.][00]\n */}\n  format={\n0,0.00\n}\n  {/* The minimum number allowed */}\n  min={3}\n  {/* The maxinum number allowed */}\n  max={5}\n/\n\n\n\n\n\nSelect\n\n\nf.input name=\nexample\n component=\nselect\n\n  options={[[\nCA\n, \nCanada\n], [\nnotCA\n, \nNot Canada\n]]}\n/\n\n\n\n\n\nNote:\n Select components require a set of options. See Core Components for details.\n\n\nSwitch\n\n\nf.input name=\nexample\n component=\nswitch\n\n  onColor=\nprimary\n {/* primary, success, info, warning, danger or default */}\n  onText=\nON\n\n  offColor=\ndefault\n {/* primary, success, info, warning, danger or default */}\n  offText=\nOFF\n\n  bsSize=undefined {/* mini, small, undefined (normal sized) or large */}\n  disabled=false\n  {/* Sets the width of the switch handles, useful for displaying longer onTexts\n    * and offTexts */}\n  handleWidth=undefined\n/\n\n\n\n\n\nText\n\n\nf.input name=\nexample\n component=\ntext\n/\n\n\n\n\n\nTimepicker\n\n\nf.input name=\nexample\n component=\ntimepicker\n/\n\n\n\n\n\nTypeahead\n\n\nf.input name=\nexample\n component=\ntypeahead\n\n  options={[[\nCA\n, \nCanada\n], [\nnotCA\n, \nNot Canada\n]]}\n  {/* The minimum number of characters to display typeahead suggestions */}\n  minLength={3}\n  {/* The maxinum number of typeahead suggestions to display */}\n  maxSuggestions={5}\n  {/* Set displaySelections to false if you want to do a custom rendering of\n    * the users choices. */}\n  displaySelections={true}\n/\n\n\n\n\n\nNote:\n Typeahead components require a set of options to pull suggestions from. See Core Components for details.", 
            "title": "Bootstrap Components"
        }, 
        {
            "location": "/bootstrap_components/#checkbox", 
            "text": "f.input name= example  component= checkbox /", 
            "title": "Checkbox"
        }, 
        {
            "location": "/bootstrap_components/#color", 
            "text": "f.input name= example  component= color /", 
            "title": "Color"
        }, 
        {
            "location": "/bootstrap_components/#file", 
            "text": "f.input name= example  component= file /", 
            "title": "File"
        }, 
        {
            "location": "/bootstrap_components/#input", 
            "text": "f.input name= example  component= input /", 
            "title": "Input"
        }, 
        {
            "location": "/bootstrap_components/#number", 
            "text": "f.input name= example  component= number \n  {/* Uses [numeral.js][http://numeraljs.com] format. Defaults to:  0,0[.][00]  */}\n  format={ 0,0.00 }\n  {/* The minimum number allowed */}\n  min={3}\n  {/* The maxinum number allowed */}\n  max={5}\n/", 
            "title": "Number"
        }, 
        {
            "location": "/bootstrap_components/#select", 
            "text": "f.input name= example  component= select \n  options={[[ CA ,  Canada ], [ notCA ,  Not Canada ]]}\n/   Note:  Select components require a set of options. See Core Components for details.", 
            "title": "Select"
        }, 
        {
            "location": "/bootstrap_components/#switch", 
            "text": "f.input name= example  component= switch \n  onColor= primary  {/* primary, success, info, warning, danger or default */}\n  onText= ON \n  offColor= default  {/* primary, success, info, warning, danger or default */}\n  offText= OFF \n  bsSize=undefined {/* mini, small, undefined (normal sized) or large */}\n  disabled=false\n  {/* Sets the width of the switch handles, useful for displaying longer onTexts\n    * and offTexts */}\n  handleWidth=undefined\n/", 
            "title": "Switch"
        }, 
        {
            "location": "/bootstrap_components/#text", 
            "text": "f.input name= example  component= text /", 
            "title": "Text"
        }, 
        {
            "location": "/bootstrap_components/#timepicker", 
            "text": "f.input name= example  component= timepicker /", 
            "title": "Timepicker"
        }, 
        {
            "location": "/bootstrap_components/#typeahead", 
            "text": "f.input name= example  component= typeahead \n  options={[[ CA ,  Canada ], [ notCA ,  Not Canada ]]}\n  {/* The minimum number of characters to display typeahead suggestions */}\n  minLength={3}\n  {/* The maxinum number of typeahead suggestions to display */}\n  maxSuggestions={5}\n  {/* Set displaySelections to false if you want to do a custom rendering of\n    * the users choices. */}\n  displaySelections={true}\n/   Note:  Typeahead components require a set of options to pull suggestions from. See Core Components for details.", 
            "title": "Typeahead"
        }
    ]
}